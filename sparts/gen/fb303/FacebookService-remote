#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (1.0.0-dev)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import FacebookService
from ttypes import *

epilog = """Functions:
  string getName()
  string getVersion()
  fb_status getStatus()
  string getStatusDetails()
   getCounters()
  i64 getCounter(string key)
  void setOption(string key, string value)
  string getOption(string key)
   getOptions()
  string getCpuProfile(i32 profileDurationInSec)
  i64 aliveSince()
  void reinitialize()
  void shutdown()
"""
import argparse

ap = argparse.ArgumentParser(epilog=epilog,
       formatter_class=argparse.RawTextHelpFormatter)
ap.add_argument('-H', '--hostport', metavar='HOST[:PORT]')
ap.add_argument('-u', '--url', metavar='URL')
ap.add_argument('-f', '--framed', action='store_true')
ap.add_argument('-s', '--ssl', action='store_true')
ap.add_argument('-k', '--insecure', action='store_true')
ap.add_argument('function')
ap.add_argument('args', nargs='*')

ns = ap.parse_args()

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
http = False
argi = 1

if ns.hostport:
  parts = ns.hostport.split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])

if ns.url:
  url = urlparse(ns.url)
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  if ns.ssl:
    check_ssl = not ns.insecure
    socket = TSSLSocket.TSSLSocket(host, port,
                                   not ns.insecure)
  else:
    socket = TSocket.TSocket(host, port)
  if ns.framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = FacebookService.Client(protocol)
transport.open()

if ns.function == 'getName':
  if len(ns.args) != 0:
    print 'getName requires 0 args'
    sys.exit(1)
  pp.pprint(client.getName())

elif ns.function == 'getVersion':
  if len(ns.args) != 0:
    print 'getVersion requires 0 args'
    sys.exit(1)
  pp.pprint(client.getVersion())

elif ns.function == 'getStatus':
  if len(ns.args) != 0:
    print 'getStatus requires 0 args'
    sys.exit(1)
  pp.pprint(client.getStatus())

elif ns.function == 'getStatusDetails':
  if len(ns.args) != 0:
    print 'getStatusDetails requires 0 args'
    sys.exit(1)
  pp.pprint(client.getStatusDetails())

elif ns.function == 'getCounters':
  if len(ns.args) != 0:
    print 'getCounters requires 0 args'
    sys.exit(1)
  pp.pprint(client.getCounters())

elif ns.function == 'getCounter':
  if len(ns.args) != 1:
    print 'getCounter requires 1 args'
    sys.exit(1)
  pp.pprint(client.getCounter(ns.args[0],))

elif ns.function == 'setOption':
  if len(ns.args) != 2:
    print 'setOption requires 2 args'
    sys.exit(1)
  pp.pprint(client.setOption(ns.args[0],ns.args[1],))

elif ns.function == 'getOption':
  if len(ns.args) != 1:
    print 'getOption requires 1 args'
    sys.exit(1)
  pp.pprint(client.getOption(ns.args[0],))

elif ns.function == 'getOptions':
  if len(ns.args) != 0:
    print 'getOptions requires 0 args'
    sys.exit(1)
  pp.pprint(client.getOptions())

elif ns.function == 'getCpuProfile':
  if len(ns.args) != 1:
    print 'getCpuProfile requires 1 args'
    sys.exit(1)
  pp.pprint(client.getCpuProfile(eval(ns.args[0]),))

elif ns.function == 'aliveSince':
  if len(ns.args) != 0:
    print 'aliveSince requires 0 args'
    sys.exit(1)
  pp.pprint(client.aliveSince())

elif ns.function == 'reinitialize':
  if len(ns.args) != 0:
    print 'reinitialize requires 0 args'
    sys.exit(1)
  pp.pprint(client.reinitialize())

elif ns.function == 'shutdown':
  if len(ns.args) != 0:
    print 'shutdown requires 0 args'
    sys.exit(1)
  pp.pprint(client.shutdown())

else:
  print 'Unrecognized method %s' % ns.function
  sys.exit(1)

transport.close()
